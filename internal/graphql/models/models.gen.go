// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type ActionsInput struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

type CreateRoleInput struct {
	Title       string `json:"title"`
	Description string `json:"description"`
}

type GraphqlAction struct {
	Title       string    `json:"title"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type Role struct {
	ID          ID               `json:"id"`
	Title       string           `json:"title"`
	Description string           `json:"description"`
	CreatedAt   time.Time        `json:"createdAt"`
	UpdatedAt   time.Time        `json:"updatedAt"`
	Actions     []*GraphqlAction `json:"actions"`
}

type RolesInput struct {
	Search *string `json:"search"`
	Limit  int     `json:"limit"`
	Offset int     `json:"offset"`
}

type SignInInput struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

type SignUpInput struct {
	Login     string `json:"login"`
	Password  string `json:"password"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

type Tokens struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type UpdateAccountInput struct {
	Login     *string `json:"login"`
	FirstName *string `json:"firstName"`
	LastName  *string `json:"lastName"`
}

type UpdateAccountPasswordInput struct {
	ID          ID     `json:"id"`
	OldPassword string `json:"oldPassword"`
	NewPassword string `json:"newPassword"`
}

type UpdateActionInput struct {
	Action      string  `json:"action"`
	Description *string `json:"description"`
}

type UpdateRoleInput struct {
	ID          ID      `json:"id"`
	Title       *string `json:"title"`
	Description *string `json:"description"`
}

type UpdateUserInput struct {
	ID        ID      `json:"id"`
	FirstName *string `json:"firstName"`
	LastName  *string `json:"lastName"`
}

type User struct {
	ID        ID        `json:"id"`
	Login     string    `json:"login"`
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Roles     []*Role   `json:"roles"`
}

type UsersInput struct {
	Search *string `json:"search"`
	Limit  int     `json:"limit"`
	Offset int     `json:"offset"`
}

type Action string

const (
	ActionCreateRole         Action = "CREATE_ROLE"
	ActionDeleteRole         Action = "DELETE_ROLE"
	ActionGetAction          Action = "GET_ACTION"
	ActionGetRole            Action = "GET_ROLE"
	ActionGetRoleAction      Action = "GET_ROLE_ACTION"
	ActionGetRoleDescription Action = "GET_ROLE_DESCRIPTION"
	ActionGetUser            Action = "GET_USER"
	ActionGeyUserRole        Action = "GEY_USER_ROLE"
	ActionUpdateAction       Action = "UPDATE_ACTION"
	ActionUpdateActionTitle  Action = "UPDATE_ACTION_TITLE"
	ActionUpdateRole         Action = "UPDATE_ROLE"
	ActionUpdateRoleMethod   Action = "UPDATE_ROLE_METHOD"
	ActionUpdateRoleTitle    Action = "UPDATE_ROLE_TITLE"
	ActionUpdateUserRole     Action = "UPDATE_USER_ROLE"
)

var AllAction = []Action{
	ActionCreateRole,
	ActionDeleteRole,
	ActionGetAction,
	ActionGetRole,
	ActionGetRoleAction,
	ActionGetRoleDescription,
	ActionGetUser,
	ActionGeyUserRole,
	ActionUpdateAction,
	ActionUpdateActionTitle,
	ActionUpdateRole,
	ActionUpdateRoleMethod,
	ActionUpdateRoleTitle,
	ActionUpdateUserRole,
}

func (e Action) IsValid() bool {
	switch e {
	case ActionCreateRole, ActionDeleteRole, ActionGetAction, ActionGetRole, ActionGetRoleAction, ActionGetRoleDescription, ActionGetUser, ActionGeyUserRole, ActionUpdateAction, ActionUpdateActionTitle, ActionUpdateRole, ActionUpdateRoleMethod, ActionUpdateRoleTitle, ActionUpdateUserRole:
		return true
	}
	return false
}

func (e Action) String() string {
	return string(e)
}

func (e *Action) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Action(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Action", str)
	}
	return nil
}

func (e Action) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Binding string

const (
	BindingBind   Binding = "BIND"
	BindingUnbind Binding = "UNBIND"
)

var AllBinding = []Binding{
	BindingBind,
	BindingUnbind,
}

func (e Binding) IsValid() bool {
	switch e {
	case BindingBind, BindingUnbind:
		return true
	}
	return false
}

func (e Binding) String() string {
	return string(e)
}

func (e *Binding) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Binding(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Binding", str)
	}
	return nil
}

func (e Binding) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
